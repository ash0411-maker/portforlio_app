{"ast":null,"code":"(function ($) {\n  var cocoon_element_counter = 0;\n\n  var create_new_id = function create_new_id() {\n    return new Date().getTime() + cocoon_element_counter++;\n  };\n\n  var newcontent_braced = function newcontent_braced(id) {\n    return '[' + id + ']$1';\n  };\n\n  var newcontent_underscord = function newcontent_underscord(id) {\n    return '_' + id + '_$1';\n  };\n\n  var getInsertionNodeElem = function getInsertionNodeElem(insertionNode, insertionTraversal, $this) {\n    if (!insertionNode) {\n      return $this.parent();\n    }\n\n    if (typeof insertionNode == 'function') {\n      if (insertionTraversal) {\n        console.warn('association-insertion-traversal is ignored, because association-insertion-node is given as a function.');\n      }\n\n      return insertionNode($this);\n    }\n\n    if (typeof insertionNode == 'string') {\n      if (insertionTraversal) {\n        return $this[insertionTraversal](insertionNode);\n      } else {\n        return insertionNode == \"this\" ? $this : $(insertionNode);\n      }\n    }\n  };\n\n  $(document).on('click', '.add_fields', function (e) {\n    e.preventDefault();\n    var $this = $(this),\n        assoc = $this.data('association'),\n        assocs = $this.data('associations'),\n        content = $this.data('association-insertion-template'),\n        insertionMethod = $this.data('association-insertion-method') || $this.data('association-insertion-position') || 'before',\n        insertionNode = $this.data('association-insertion-node'),\n        insertionTraversal = $this.data('association-insertion-traversal'),\n        count = parseInt($this.data('count'), 10),\n        regexp_braced = new RegExp('\\\\[new_' + assoc + '\\\\](.*?\\\\s)', 'g'),\n        regexp_underscord = new RegExp('_new_' + assoc + '_(\\\\w*)', 'g'),\n        new_id = create_new_id(),\n        new_content = content.replace(regexp_braced, newcontent_braced(new_id)),\n        new_contents = [];\n\n    if (new_content == content) {\n      regexp_braced = new RegExp('\\\\[new_' + assocs + '\\\\](.*?\\\\s)', 'g');\n      regexp_underscord = new RegExp('_new_' + assocs + '_(\\\\w*)', 'g');\n      new_content = content.replace(regexp_braced, newcontent_braced(new_id));\n    }\n\n    new_content = new_content.replace(regexp_underscord, newcontent_underscord(new_id));\n    new_contents = [new_content];\n    count = isNaN(count) ? 1 : Math.max(count, 1);\n    count -= 1;\n\n    while (count) {\n      new_id = create_new_id();\n      new_content = content.replace(regexp_braced, newcontent_braced(new_id));\n      new_content = new_content.replace(regexp_underscord, newcontent_underscord(new_id));\n      new_contents.push(new_content);\n      count -= 1;\n    }\n\n    var insertionNodeElem = getInsertionNodeElem(insertionNode, insertionTraversal, $this);\n\n    if (!insertionNodeElem || insertionNodeElem.length == 0) {\n      console.warn(\"Couldn't find the element to insert the template. Make sure your `data-association-insertion-*` on `link_to_add_association` is correct.\");\n    }\n\n    $.each(new_contents, function (i, node) {\n      var contentNode = $(node);\n      insertionNodeElem.trigger('cocoon:before-insert', [contentNode]); // allow any of the jquery dom manipulation methods (after, before, append, prepend, etc)\n      // to be called on the node.  allows the insertion node to be the parent of the inserted\n      // code and doesn't force it to be a sibling like after/before does. default: 'before'\n\n      var addedContent = insertionNodeElem[insertionMethod](contentNode);\n      insertionNodeElem.trigger('cocoon:after-insert', [contentNode]);\n    });\n  });\n  $(document).on('click', '.remove_fields.dynamic, .remove_fields.existing', function (e) {\n    var $this = $(this),\n        wrapper_class = $this.data('wrapper-class') || 'nested-fields',\n        node_to_delete = $this.closest('.' + wrapper_class),\n        trigger_node = node_to_delete.parent();\n    e.preventDefault();\n    trigger_node.trigger('cocoon:before-remove', [node_to_delete]);\n    var timeout = trigger_node.data('remove-timeout') || 0;\n    setTimeout(function () {\n      if ($this.hasClass('dynamic')) {\n        node_to_delete.remove();\n      } else {\n        $this.prev(\"input[type=hidden]\").val(\"1\");\n        node_to_delete.hide();\n      }\n\n      trigger_node.trigger('cocoon:after-remove', [node_to_delete]);\n    }, timeout);\n  });\n  $(document).on(\"ready page:load turbolinks:load\", function () {\n    $('.remove_fields.existing.destroyed').each(function (i, obj) {\n      var $this = $(this),\n          wrapper_class = $this.data('wrapper-class') || 'nested-fields';\n      $this.closest('.' + wrapper_class).hide();\n    });\n  });\n})(jQuery);","map":null,"metadata":{},"sourceType":"module"}